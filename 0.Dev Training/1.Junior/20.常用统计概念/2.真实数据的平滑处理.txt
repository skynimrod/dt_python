. 来自各种真是时间传感器的数据 通常都是 不平滑和不干净的, 包含了一些我们不想显示在图表或者图形中的噪声.  我们希望图表和图形能清晰的传递信息, 不想让用户在理解上花费过多的精力。 

. 操作步骤

  基础算法是基于滚动窗口(rolling window)模式(例如 卷积). 窗口滚动过数据, 然后计算出窗口内数据的平均值.

  对于离散数据, 我们使用 NumPy 的 convolve 方法, 它返回两个一维序列的离散线性卷积. 我们也使用 NumPy 的 linspace 方法, 他生成一个给定间隔的等距数字序列.

  方法ones 定义了一个所有元素值为1 的序列或者矩阵(例如 多维数组). 我们用它来生成用于求平均值的窗口.

. 工作原理

  平滑数据噪声的一个简单朴素的做法是:  对窗口(样本)求平均, 然后仅仅绘制出给定窗口的平均值, 而不是所有的数据点. 这也是更高级算法的基础.

. 代码见: rw.py

. 基于以上思路, 可以开始一个更高级的例子. 使用现有的SciPy 库来让窗口平滑处理达到更好的效果.

  以下方法是基于信号(指数据点)窗口的卷积(函数的总和). 我们在准备信号时 用了一些小技巧, 向两端添加相同信号的副本并做反射. 这样一来, 就减小了数据的边界效应.  

  代码参见: SigSmooth.py

. 中值滤波

   另一个非常流行的信号平滑处理算法是中值滤波(Median Filter). 中值滤波的中心思想就是逐项的遍历信号, 并用相邻信号项的中值替换当前项. 这种方法使得滤波处理非常快速, 而且对于一维数据集合和量维数据集合(例如 图像) 都适用.

   代码参见: medianFilter.py

   从例子运行得到的图形中, 可以看到窗口越大, 信号和原始信号相比失真越严重, 但同时看上去也越平滑. 

   许多方法可以对 从外部信号源接收的数据(信号) 进行平滑处理, 这取决于工作的领域和信号的性质. 许多算法都是专门用于某一种特定的信号, 可能没有一个通用解决方案普遍适用于所有的情况.

    然而, 一个非常重要的问题是, "什么时候不应该对信号进行平滑处理?" 一个常见的情况是在统计过程( 如 最小二乘曲线拟合, least-squares curve fitting) 之前, 因为所有的平滑算法或多或少都会使 信号产生失真, 从而改变信号波形. 而且, 对于真实信号而言, 平滑处理的噪声对于真是的信号来说可能是错误的.

