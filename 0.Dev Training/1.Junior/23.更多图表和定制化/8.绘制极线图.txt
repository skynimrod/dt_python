. 绘制极线图

      如果数据已经是以极坐标形式表示的, 我们也可以用极线图来把它显示出来. 即使数据不再极坐标内, 也应该考虑把它转换成极坐标形式并在极线图上画出来.

      要回答我们是否需要这样做, 需要了解数据代表什么以及希望显示给用户什么. 想象一下什么是用户想从图表中读到的和解码的, 这通常会让我们得到最好的可视化效果. 

      极线图通常被用来显示本质上是射线的信息. 例如, 在太阳轨迹图中, 我们看到放射投影的天空, 触角的辐射图的辐射角度各异. 可以从 http://www.astronwireless.com/topic-archives-antenna-radiation-patterns.asp 了解更多的内容.

      这儿学习如何改变图表中使用的坐标系统, 并以极限坐标系统代替.

. 准备工作

      为了在极限坐标下显示数据，必须有合适的数据值. 在极坐标系统中, 点被描述为半径距离(通常表示为r)和角度(通常表示为theta). 角度可以用弧度或者角度表示, 但是 matplotlib 使用角度.

      和 plot() 函数十分相似的是, 我们用 polar() 函数绘制极线图. polar() 函数接受两个相同长度的参数数组theta 和 r, 分别用于角度数组和半径数组. 函数也接收其他和plot() 函数相同的格式化参数.

      我们仍然需要告诉matplotlib 坐标轴要在极限坐标系统中. 这通过向add_axes 或 add_subplot 提供 polar=True 参数来完成.

      此外, 为了设置图表中的其他属性, 如半径网格或者角度, 需要使用matplotlib.pyplot.rgrids()来切换半径网格的显示或者设置标签. 同样, 使用matplotlib.pyplot.thetagrid()来配置角度刻度和标签.

. 例子代码: 8_polar.py

. 工作原理

      首先, 创建了一个正方形的图表, 并向其添加极限坐标轴. 其实图表不必是正方形的, 但是如果不这样的话, 极线图就是椭圆形(而不是圆形)的了.

      然后, 为角度(theta) 集合和极线距离(radii) 生成随机值. 因为绘制的是极线条, 需要为每一个极线条提供宽度集合, 因此需要生成一些宽度值. 因为 matplotlib.axes.bar 接收值数组(几乎matplotlib 中所有的绘图函数都是如此), 所以不必在这个生成的数据集合上做循环遍历, 只需要调用一次bar函数, 并传入所有的参数.

      为了能够容易区分每一个极线条, 需要循环遍历添加到ax(坐标轴)的每一个极线条, 并定制化其外观(表面颜色和透明度).