. 参见:

      http://www.cnblogs.com/BeginMan/p/3178103.html

. 1. lambda 函数

     lambda 函数也叫匿名函数, 即, 函数没有具体的名字, 而用 def 创建的方法是有名称的.  如下:

     """命名的foo函数"""
     def foo(): return 'beginman'      # Python中单行参数可以和标题写在一行

     """lambda关键字创建匿名函数, 该表达式同以上函数"""
     lambda:'beginman'

     上面的知识简单的用lambda 创建了一个函数对象, 并没有保存它也没有调用它, 时刻会被回收了。 下面我们保存并调用:

     bar = lambda:'beginman'
     print bar()         # beginman

     从上面的例子中, 可以理解 Python lambda 语法:

     lambda [arg1[,arg2,arg3...argN]]:expression

     lambda 语句中, 冒号前是参数, 可以有多个, 用逗号隔开, 冒号右边的返回值.  lambda 语句构建的其实是一个函数对象.

     print lambda:'beginman'      # <function <lambda> at 0x00B00A30>

. 2. 无参数

     如果没有参数, 则 lambda 冒号前面就没有, 如以上例子.

. 3. 有参数

def add(x,y):return x+y
add2 = lambda x,y:x+y
print add2(1,2)     #3

def sum(x,y=10):return x+y
sum2 = lambda x,y=10:x+y
print sum2(1)       #11
print sum2(1,100)   #101


. 二、lambda 与 def

   上面的例子中, 可知 lambda 函数只是创建简单的函数对象, 是一个函数的单行版本, 但是这种语句由于性能的原因, 调用的时候绕过函数的栈分配. python lambda 还有哪些和def不一样的？

  1. python lambda 会创建一个函数对象, 但不会吧这个对象赋给一个标志符, 而 def 则会把函数对象赋值给一个变量.

     如:
>>> def foo():return 'foo()'
>>> foo
<function foo at 0x011A34F0>

  2. python lambda 它只是一个表达式, 而 def 则是一个语句.  lambda 表达式运行起来像一个函数, 当被调用时创建一个框架对象.

. 三、lambda 函数的用途

  1. 但与单行函数, 使用lambda 可以省去定义函数的过程, 让代码更加精简

  2. 在非多次调用的函数的情况下, lambda 表达式即用既得, 提高性能

     注意: 如果 for..in..if 能做的, 最好不好选择 lambda

. 参考

  http://www.cnblogs.com/coderzh/archive/2010/04/30/python-cookbook-lambda.html

http://www.cnblogs.com/wanpython/archive/2010/11/01/1865919.html