参见:

     https://docs.djangoproject.com/en/1.10/intro/tutorial07/

. 在初始化数据库数据的最后也有一部分描述admin 页面

. 这儿主要是定制admin 页面

polls/admin.py

from django.contrib import admin

from .models import Question


class QuestionAdmin(admin.ModelAdmin):
    fields = ['pub_date', 'question_text']

admin.site.register(Question, QuestionAdmin)

  注意:  QuestionAdmin 必须放在Question后面, 并在一个register 被调用, 单独register(QuestionAdmin)就会出错.  因为 QuestionAdmin本质上是改变了Question 的字段的显示顺序而已.

如果进一步修改QuestionAdmin类

class QuestionAdmin(admin.ModelAdmin):
    fieldsets = [
        (None,               {'fields': ['question_text']}),
        ('Date information', {'fields': ['pub_date']}),
    ]


那么展现内容更加丰富. 

进一步修改并添加以下代码, 将相关联的数据也显示出来

class ChoiceInline(admin.StackedInline):
    model = Choice
    extra = 3


class QuestionAdmin(admin.ModelAdmin):
    fieldsets = [
        (None,               {'fields': ['question_text']}),
        ('Date information', {'fields': ['pub_date'], 'classes': ['collapse']}),
    ]
    inlines = [ChoiceInline]


由于ChoiceInline()中的StackedInline 方式会占用很多页面空间, 可以进行下面的优化

polls/admin.py

class ChoiceInline(admin.TabularInline):
    #...


为了方便下拉选择数据, 进一步优化

class QuestionAdmin(admin.ModelAdmin):
    # ...
    list_display = ('question_text', 'pub_date')

增加以下数据判断的信息

class QuestionAdmin(admin.ModelAdmin):
    # ...
    list_display = ('question_text', 'pub_date', 'was_published_recently')


在Question 类对象中添加以下内容

 polls/models.py

class Question(models.Model):
    # ...
    def was_published_recently(self):
        now = timezone.now()
        return now - datetime.timedelta(days=1) <= self.pub_date <= now
    was_published_recently.admin_order_field = 'pub_date'
    was_published_recently.boolean = True
    was_published_recently.short_description = 'Published recently?'


然后在polls/admin.py 中添加以下代码

list_filter = ['pub_date']

这样的就会在admin 页面中的右侧添加一个过滤功能.

在admin 页面添加搜索功能, 只需要在polls/admin.py 中添加如下代码:

search_fields = ['question_text']

. ----------------------------------------------------------------------

. 下面定制Admin 页面的外观

  在项目目录  ( manage.py 所在目录). 创建一个templates 目录.  本质上讲, 该目录可以使任何Django可访问的目录, 不过放在项目目录下更好, 符合约定俗成.


mysite/settings.py

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

DIRS 是文件系统目录列表, 用来在载入Django 模板的时候进行检测搜索.  

然后在 刚才的templates目录下面建一个admin 子目录， 然后从 Django 缺省的admin 模板目录中拷贝一份base_site.html  过来 (在django/contrib/admin/templates/admin/... 目录中有)


察看Django的路径

python -c "import django; print(django.__path__)"

或者用 pip show django

然后修改 base_site.html, 用 你自己的站点名称替代 {{ site_header|default:_('Django administration') }} 。 如下:

{% block branding %}
<h1 id="site-name"><a href="{% url 'admin:index' %}">Polls Administration</a></h1>
{% endblock %}

也就是 Polls Administration 替换了 {{ site_header|default:_('Django administration') }}