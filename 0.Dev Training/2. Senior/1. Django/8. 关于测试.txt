参见:

    https://docs.djangoproject.com/en/1.10/intro/tutorial05/

    https://docs.djangoproject.com/en/1.10/topics/testing/

    https://en.wikipedia.org/wiki/Test-driven_development

. 现在有不少测试驱动开发的模式.

. 创建一个test来暴露bug

  app1/tests.py

import datetime

from django.utils import timezone
from django.test import TestCase

from .models import Question


class QuestionMethodTests(TestCase):

    def test_was_published_recently_with_future_question(self):
        """
        was_published_recently() should return False for questions whose
        pub_date is in the future.
        """
        time = timezone.now() + datetime.timedelta(days=30)
        future_question = Question(pub_date=time)
        self.assertIs(future_question.was_published_recently(), False)

. 上面的代码测试 question 的pub_date 是否使用了未来时间, 由于原来的was_published_recently() 仅仅检测是否使大于等1天

  def was_published_recently(self):
        return self.pub_date >= timezone.now() - datetime.timedelta( days = 1)  # error sentence, used to test test

  测试结果:  没有通过, 因为测试数据使用了30天后的时间， 上面的model中的代码仅仅检测了是否使1天, 而没有检测未来时间.

(env2) F:\F_3_test\3_Python\mysite>manage.py test polls
Creating test database for alias 'default'...
F
======================================================================
FAIL: test_was_published_recently_with_future_question (polls.tests.QuestionMeth
odTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "F:\F_3_test\3_Python\mysite\polls\tests.py", line 21, in test_was_publis
hed_recently_with_future_question
    self.assertIs(future_question.was_published_recently(), False)
AssertionError: True is not False

----------------------------------------------------------------------
Ran 1 test in 0.080s

FAILED (failures=1)
Destroying test database for alias 'default'...

        

. 修正BUG:  修改代码如下:  增加了 <= now 的判断.

def was_published_recently(self):
        #return self.pub_date >= timezone.now() - datetime.timedelta( days = 1)  # error sentence, used to test test
        now = timezone.now()
        return now - datetime.timedelta( days=10) <= self.pub_date <= now
 
如果测试通过, 结果如下:
(env2) F:\F_3_test\3_Python\mysite>manage.py test polls
Creating test database for alias 'default'...
.
----------------------------------------------------------------------
Ran 1 test in 0.060s

OK
Destroying test database for alias 'default'...

(env2) F:\F_3_test\3_Python\mysite>

------

. 之前的测试属于内部代码的测试, 接下来是关于view 的测试， 检测外部操作。

. Django 测试客户端  test client 在view 一层模拟用户接口代码. 可以在tests.py 中使用, 也可以在shell 中使用.

. shell 中使用如下:

  1. 搭建测试环境

  >>> from django.test.utils import setup_test_environment
  >>> setup_test_environment()

  setup_test_environment() 会安装一个模板渲染 , 可以用来通过response (例如response.context)来测试一些属性.

  这个测试使用的是现有的数据库

(env2) F:\F_3_test\3_Python\mysite>python
Python 3.4.2 (v3.4.2:ab2c023a9432, Oct  6 2014, 22:16:31) [MSC v.1600 64 bit (AM
D64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> from django.test.utils import setup_test_environment
>>> setup_test_environment()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "C:\Users\my\Envs\env2\lib\site-packages\django\test\utils.py", line 108,
 in setup_test_environment
    mail._original_email_backend = settings.EMAIL_BACKEND
  File "C:\Users\my\Envs\env2\lib\site-packages\django\conf\__init__.py", line 5
3, in __getattr__
    self._setup(name)
  File "C:\Users\my\Envs\env2\lib\site-packages\django\conf\__init__.py", line 3
9, in _setup
    % (desc, ENVIRONMENT_VARIABLE))
django.core.exceptions.ImproperlyConfigured: Requested setting EMAIL_BACKEND, bu
t settings are not configured. You must either define the environment variable D
JANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.

  分析:

     需要先设置EMAIL_BACKEND 等环境变量.  核心原因是通过python 启动的shell 没有项目相关的设置信息, 应该用Django的shell， 也即manage.py shell 启动shell

(env2) F:\F_3_test\3_Python\mysite>manage.py shell
Python 3.4.2 (v3.4.2:ab2c023a9432, Oct  6 2014, 22:16:31) [MSC v.1600 64 bit (AM
D64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from django.test.utils import setup_test_environment
>>> setup_test_environment()
>>>

  2. 引入test client类( 如果在tests.py 中, 需要使用的是 django.test.TestCase类)

  >>> from django.test import Client    # create an instance of the client for usr use
  >>> client = Client()
 
  3. 上面的准备工作做完后, 可以做以下一些测试: (注意, 这儿的测试不需要另外再启动web Server, 即不需要 manage.py runserver操作的)

  >>> # get a response from '/'
  >>> response = client.get('/')
  Not Found: /
  >>> # we should expect a 404 from that address
  >>> response.status_code
  404
  >>> # on the other hand we should expect to find something at '/polls/'
  >>> # we'll use 'reverse()' rather than a hardcoded URL
  >>> from django.urls import reverse
  >>> response = client.get( reverse('polls:index'))
  >>> response.status_code
  200
  >>> response.content
>>> response.content
b'\n    <ul>\n    \n        <li><a href="/polls/12/">1. What&#39;s your name?</a
></li>\n    \n        <li><a href="/polls/13/">2. What&#39;s your name?</a></li>
\n    \n        <li><a href="/polls/14/">3. What&#39;s your name?</a></li>\n
\n        <li><a href="/polls/15/">4. What&#39;s your name?</a></li>\n    \n
    <li><a href="/polls/16/">5. What&#39;s your name?</a></li>\n    \n    </ul>\
n'
  >>> # if the following doesn't work, you probably omitted the call to
  >>> # setup_test_environment() described above
  >>> response.context['latest_question_list']
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "C:\Users\my\Envs\env2\lib\site-packages\django\template\context.py", lin
e 75, in __getitem__
    raise KeyError(key)
KeyError: 'latest_question_list'

  >>> # 原因是 polls/views.py 中 ListView 中错写为 lastest_question_list, 应该是 latest_question_list   , 修改了还是不行, 上面的步骤重新来一遍就可以了 。。。。. 
  >>> response.context['latest_question_list']
<QuerySet [<Question: 1. What's your name?>, <Question: 2. What's your name?>, <
Question: 3. What's your name?>, <Question: 4. What's your name?>, <Question: 5.
 What's your name?>]>
  >>>

>>> response.context['latest_question_list'][0]
<Question: 1. What's your name?>
>>> response.context['latest_question_list'][0].pub_date
datetime.datetime(2016, 10, 6, 10, 33, 26, tzinfo=<UTC>)

. 测试view 

   这儿的测试没有使用现有数据库, 而是测试数据库。。。

  1. 先修改 polls/views, 处理查询结果
 
     polls/views

     ....
     from django.utils import timezone

     ....
     def get_queryset(self):
         """
        Return the last five published questions (not including those set to be
         published in the future).
         """
         return Question.objects.filter(
             pub_date__lte=timezone.now()
         ).order_by('-pub_date')[:5]

     #### 一定要注意  pub_date__lte  中， lte 前面是2个下划线__, 而不是一个下划线_

  2. 修改 polls/tests.py, 增加测试代码

    。。。
from django.urls import reverse
    。。。
def create_question(question_text, days):
    """
    Creates a question with the given `question_text` and published the
    given number of `days` offset to now (negative for questions published
    in the past, positive for questions that have yet to be published).
    """
    time = timezone.now() + datetime.timedelta(days=days)
    return Question.objects.create(question_text=question_text, pub_date=time)


class QuestionViewTests(TestCase):
    def test_index_view_with_no_questions(self):
        """
        If no questions exist, an appropriate message should be displayed.
        """
        response = self.client.get(reverse('polls:index'))
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, "No polls are available.")
        self.assertQuerysetEqual(response.context['latest_question_list'], [])

    def test_index_view_with_a_past_question(self):
        """
        Questions with a pub_date in the past should be displayed on the
        index page.
        """
        create_question(question_text="Past question.", days=-30)
        response = self.client.get(reverse('polls:index'))
        self.assertQuerysetEqual(
            response.context['latest_question_list'],
            ['<Question: Past question.>']
        )

    def test_index_view_with_a_future_question(self):
        """
        Questions with a pub_date in the future should not be displayed on
        the index page.
        """
        create_question(question_text="Future question.", days=30)
        response = self.client.get(reverse('polls:index'))
        self.assertContains(response, "No polls are available.")
        self.assertQuerysetEqual(response.context['latest_question_list'], [])

    def test_index_view_with_future_question_and_past_question(self):
        """
        Even if both past and future questions exist, only past questions
        should be displayed.
        """
        create_question(question_text="Past question.", days=-30)
        create_question(question_text="Future question.", days=30)
        response = self.client.get(reverse('polls:index'))
        self.assertQuerysetEqual(
            response.context['latest_question_list'],
            ['<Question: Past question.>']
        )

    def test_index_view_with_two_past_questions(self):
        """
        The questions index page may display multiple questions.
        """
        create_question(question_text="Past question 1.", days=-30)
        create_question(question_text="Past question 2.", days=-5)
        response = self.client.get(reverse('polls:index'))
        self.assertQuerysetEqual(
            response.context['latest_question_list'],
            ['<Question: Past question 2.>', '<Question: Past question 1.>']
        )
  

 3.  然后执行测试
     manage.py test polls

 4. 即便在ListView中测试通过了, 由于只列了5个, DetailView 中仍然有可能会查出非法的数据, 因此继续测试DetailView

 5. 修改polls/views.py 中的 DetailView()类

class DetailView(generic.DetailView):
    ...
    def get_queryset(self):
        """
        Excludes any questions that aren't published yet.
        """
        return Question.objects.filter(pub_date__lte=timezone.now())

 6. polls/tests.py 中添加涉及 DetailView 部分的测试代码

class QuestionIndexDetailTests(TestCase):
    def test_detail_view_with_a_future_question(self):
        """
        The detail view of a question with a pub_date in the future should
        return a 404 not found.
        """
        future_question = create_question(question_text='Future question.', days=5)
        url = reverse('polls:detail', args=(future_question.id,))
        response = self.client.get(url)
        self.assertEqual(response.status_code, 404)

    def test_detail_view_with_a_past_question(self):
        """
        The detail view of a question with a pub_date in the past should
        display the question's text.
        """
        past_question = create_question(question_text='Past Question.', days=-5)
        url = reverse('polls:detail', args=(past_question.id,))
        response = self.client.get(url)
        self.assertContains(response, past_question.question_text)